Regex.VERSION = 1.2.0
Testing Regex.Composer
===============================================================
Partial        : [_a-z][_a-z0-9]*
Composed       : /^(?:[_a-z][_a-z0-9]*|(\*\*aabb\*\*).\s|\D+)*?\1$/i
Expected       : /^(?:[_a-z][_a-z0-9]*|(\*\*aabb\*\*).\s|\D+)*?\1$/i
Output         : {
    "source": "^(?:[_a-z][_a-z0-9]*|(\\*\\*aabb\\*\\*).\\s|\\D+)*?\\1$",
    "flags": "i",
    "groups": {
        "1": 1,
        "token": 1
    },
    "pattern": {}
}
===============================================================

Testing Regex.Analyzer
===============================================================
Input                                       : /(?P<named_group>[abcde]+)fgh(?P=named_group)(?# a comment)/i
Regular Expression                          : (?P<named_group>[abcde]+)fgh(?P=named_group)(?# a comment)
Regular Expression Flags                    : i
Reconstructed Regular Expression            : ([abcde]+)fgh\1
===============================================================
Regular Expression Syntax Tree              : 
{
    "type": "Sequence",
    "value": [
        {
            "type": "Group",
            "value": {
                "type": "Sequence",
                "value": [
                    {
                        "type": "Quantifier",
                        "value": {
                            "type": "CharacterGroup",
                            "value": [
                                {
                                    "type": "Characters",
                                    "value": [
                                        "a",
                                        "b",
                                        "c",
                                        "d",
                                        "e"
                                    ]
                                }
                            ]
                        },
                        "flags": {
                            "MatchOneOrMore": 1,
                            "min": 1,
                            "max": -1,
                            "isGreedy": 1
                        }
                    }
                ]
            },
            "flags": {
                "NamedGroup": 1,
                "GroupName": "named_group",
                "GroupIndex": 1
            }
        },
        {
            "type": "String",
            "value": "fgh"
        },
        {
            "type": "Special",
            "value": "1",
            "flags": {
                "BackReference": 1,
                "GroupName": "named_group",
                "GroupIndex": 1
            }
        },
        {
            "type": "Comment",
            "value": " a comment"
        }
    ]
}
===============================================================
Regular Expression (Named) Matched Groups   : 
{
    "1": 1,
    "named_group": 1
}
===============================================================
Regular Expression Peek Characters          : 
{
    "positive": [
        "a",
        "b",
        "c",
        "d",
        "e",
        "A",
        "B",
        "C",
        "D",
        "E"
    ],
    "negative": []
}
===============================================================
Regular Expression Minimum / Maximum Length : 
{
    "minimum": 5,
    "maximum": "unlimited"
}
===============================================================
Regular Expression Sample Match Strings     : 
[
    {
        "sample": "EbcfghEbc",
        "match": "yes",
        "groups": {
            "1": "Ebc",
            "named_group": "Ebc"
        }
    },
    {
        "sample": "acFGHac",
        "match": "yes",
        "groups": {
            "1": "ac",
            "named_group": "ac"
        }
    },
    {
        "sample": "bdBFGHbdB",
        "match": "yes",
        "groups": {
            "1": "bdB",
            "named_group": "bdB"
        }
    },
    {
        "sample": "DBacfghDBac",
        "match": "yes",
        "groups": {
            "1": "DBac",
            "named_group": "DBac"
        }
    },
    {
        "sample": "CAFGHCA",
        "match": "yes",
        "groups": {
            "1": "CA",
            "named_group": "CA"
        }
    }
]
===============================================================
/[a-]/
{
  "type": 1,
  "val": [
    {
      "type": 8,
      "val": [
        {
          "type": 256,
          "val": [
            "a",
            "-"
          ],
          "flags": {},
          "typeName": "Characters"
        }
      ],
      "flags": {},
      "typeName": "CharacterGroup"
    }
  ],
  "flags": {},
  "typeName": "Sequence"
}
/[-a]/
{
  "type": 1,
  "val": [
    {
      "type": 8,
      "val": [
        {
          "type": 256,
          "val": [
            "-",
            "a"
          ],
          "flags": {},
          "typeName": "Characters"
        }
      ],
      "flags": {},
      "typeName": "CharacterGroup"
    }
  ],
  "flags": {},
  "typeName": "Sequence"
}
/[\d-x]/
{
  "type": 1,
  "val": [
    {
      "type": 8,
      "val": [
        {
          "type": 128,
          "val": "d",
          "flags": {
            "MatchDigitChar": 1
          },
          "typeName": "Special"
        },
        {
          "type": 256,
          "val": [
            "-",
            "x"
          ],
          "flags": {},
          "typeName": "Characters"
        }
      ],
      "flags": {},
      "typeName": "CharacterGroup"
    }
  ],
  "flags": {},
  "typeName": "Sequence"
}
/(?<n>a)\k<n>/
{
  "type": 1,
  "val": [
    {
      "type": 4,
      "val": {
        "type": 1,
        "val": [
          {
            "type": 1024,
            "val": "a",
            "flags": {},
            "typeName": "String"
          }
        ],
        "flags": {},
        "typeName": "Sequence"
      },
      "flags": {
        "NamedGroup": 1,
        "GroupName": "n",
        "GroupIndex": 1
      },
      "typeName": "Group"
    },
    {
      "type": 128,
      "val": "1",
      "flags": {
        "BackReference": 1,
        "GroupName": "n",
        "GroupIndex": 1
      },
      "typeName": "Special"
    }
  ],
  "flags": {},
  "typeName": "Sequence"
}
